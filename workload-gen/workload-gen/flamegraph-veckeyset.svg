<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1011708638"><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,729,798 samples, 0.47%)</title><rect x="0.0010%" y="949" width="0.4675%" height="15" fill="rgb(227,0,7)" fg:x="10008" fg:w="4729798"/><text x="0.2510%" y="959.50"></text></g><g><title>std::io::BufRead::read_line (4,729,798 samples, 0.47%)</title><rect x="0.0010%" y="933" width="0.4675%" height="15" fill="rgb(217,0,24)" fg:x="10008" fg:w="4729798"/><text x="0.2510%" y="943.50"></text></g><g><title>std::io::append_to_string (4,729,798 samples, 0.47%)</title><rect x="0.0010%" y="917" width="0.4675%" height="15" fill="rgb(221,193,54)" fg:x="10008" fg:w="4729798"/><text x="0.2510%" y="927.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (4,729,798 samples, 0.47%)</title><rect x="0.0010%" y="901" width="0.4675%" height="15" fill="rgb(248,212,6)" fg:x="10008" fg:w="4729798"/><text x="0.2510%" y="911.50"></text></g><g><title>std::io::read_until (4,729,798 samples, 0.47%)</title><rect x="0.0010%" y="885" width="0.4675%" height="15" fill="rgb(208,68,35)" fg:x="10008" fg:w="4729798"/><text x="0.2510%" y="895.50"></text></g><g><title>core::slice::memchr::memchr (4,729,798 samples, 0.47%)</title><rect x="0.0010%" y="869" width="0.4675%" height="15" fill="rgb(232,128,0)" fg:x="10008" fg:w="4729798"/><text x="0.2510%" y="879.50"></text></g><g><title>__memcmp_evex_movbe (38,320,296 samples, 3.79%)</title><rect x="0.4685%" y="949" width="3.7877%" height="15" fill="rgb(207,160,47)" fg:x="4739806" fg:w="38320296"/><text x="0.7185%" y="959.50">__me..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (369,373,584 samples, 36.51%)</title><rect x="7.5841%" y="869" width="36.5099%" height="15" fill="rgb(228,23,34)" fg:x="76729098" fg:w="369373584"/><text x="7.8341%" y="879.50">&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (369,373,584 samples, 36.51%)</title><rect x="7.5841%" y="853" width="36.5099%" height="15" fill="rgb(218,30,26)" fg:x="76729098" fg:w="369373584"/><text x="7.8341%" y="863.50">&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (369,373,584 samples, 36.51%)</title><rect x="7.5841%" y="837" width="36.5099%" height="15" fill="rgb(220,122,19)" fg:x="76729098" fg:w="369373584"/><text x="7.8341%" y="847.50">core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;:..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (369,373,584 samples, 36.51%)</title><rect x="7.5841%" y="821" width="36.5099%" height="15" fill="rgb(250,228,42)" fg:x="76729098" fg:w="369373584"/><text x="7.8341%" y="831.50">&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal</text></g><g><title>&lt;workload_gen::keyset::VecKeySet as workload_gen::keyset::KeySet&gt;::contains (501,057,584 samples, 49.53%)</title><rect x="4.2562%" y="933" width="49.5259%" height="15" fill="rgb(240,193,28)" fg:x="43060102" fg:w="501057584"/><text x="4.5062%" y="943.50">&lt;workload_gen::keyset::VecKeySet as workload_gen::keyset::KeySet&gt;::contains</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (501,057,584 samples, 49.53%)</title><rect x="4.2562%" y="917" width="49.5259%" height="15" fill="rgb(216,20,37)" fg:x="43060102" fg:w="501057584"/><text x="4.5062%" y="927.50">core::slice::&lt;impl [T]&gt;::contains</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (501,057,584 samples, 49.53%)</title><rect x="4.2562%" y="901" width="49.5259%" height="15" fill="rgb(206,188,39)" fg:x="43060102" fg:w="501057584"/><text x="4.5062%" y="911.50">&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (501,057,584 samples, 49.53%)</title><rect x="4.2562%" y="885" width="49.5259%" height="15" fill="rgb(217,207,13)" fg:x="43060102" fg:w="501057584"/><text x="4.5062%" y="895.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (98,015,004 samples, 9.69%)</title><rect x="44.0940%" y="869" width="9.6881%" height="15" fill="rgb(231,73,38)" fg:x="446102682" fg:w="98015004"/><text x="44.3440%" y="879.50">&lt;core::slice::..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (98,015,004 samples, 9.69%)</title><rect x="44.0940%" y="853" width="9.6881%" height="15" fill="rgb(225,20,46)" fg:x="446102682" fg:w="98015004"/><text x="44.3440%" y="863.50">&lt;core::ptr::no..</text></g><g><title>[anon] (548,838,375 samples, 54.25%)</title><rect x="0.0010%" y="965" width="54.2487%" height="15" fill="rgb(210,31,41)" fg:x="10008" fg:w="548838375"/><text x="0.2510%" y="975.50">[anon]</text></g><g><title>workload_gen::write_operations (505,788,281 samples, 49.99%)</title><rect x="4.2562%" y="949" width="49.9935%" height="15" fill="rgb(221,200,47)" fg:x="43060102" fg:w="505788281"/><text x="4.5062%" y="959.50">workload_gen::write_operations</text></g><g><title>core::ptr::drop_in_place&lt;workload_gen::keyset::VecKeySet&gt; (4,730,697 samples, 0.47%)</title><rect x="53.7821%" y="933" width="0.4676%" height="15" fill="rgb(226,26,5)" fg:x="544117686" fg:w="4730697"/><text x="54.0321%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt; (4,730,697 samples, 0.47%)</title><rect x="53.7821%" y="917" width="0.4676%" height="15" fill="rgb(249,33,26)" fg:x="544117686" fg:w="4730697"/><text x="54.0321%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,730,697 samples, 0.47%)</title><rect x="53.7821%" y="901" width="0.4676%" height="15" fill="rgb(235,183,28)" fg:x="544117686" fg:w="4730697"/><text x="54.0321%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::boxed::Box&lt;[u8]&gt;]&gt; (4,730,697 samples, 0.47%)</title><rect x="53.7821%" y="885" width="0.4676%" height="15" fill="rgb(221,5,38)" fg:x="544117686" fg:w="4730697"/><text x="54.0321%" y="895.50"></text></g><g><title>__GI___libc_malloc (4,729,609 samples, 0.47%)</title><rect x="54.2588%" y="949" width="0.4675%" height="15" fill="rgb(247,18,42)" fg:x="548940554" fg:w="4729609"/><text x="54.5088%" y="959.50"></text></g><g><title>tcache_get (4,729,609 samples, 0.47%)</title><rect x="54.2588%" y="933" width="0.4675%" height="15" fill="rgb(241,131,45)" fg:x="548940554" fg:w="4729609"/><text x="54.5088%" y="943.50"></text></g><g><title>tcache_get_n (4,729,609 samples, 0.47%)</title><rect x="54.2588%" y="917" width="0.4675%" height="15" fill="rgb(249,31,29)" fg:x="548940554" fg:w="4729609"/><text x="54.5088%" y="927.50"></text></g><g><title>__memcpy_avx512_unaligned_erms (4,731,036 samples, 0.47%)</title><rect x="54.7262%" y="949" width="0.4676%" height="15" fill="rgb(225,111,53)" fg:x="553670163" fg:w="4731036"/><text x="54.9762%" y="959.50"></text></g><g><title>[unknown] (17,308,032 samples, 1.71%)</title><rect x="54.2496%" y="965" width="1.7108%" height="15" fill="rgb(238,160,17)" fg:x="548848383" fg:w="17308032"/><text x="54.4996%" y="975.50"></text></g><g><title>anon.bced811e7b4364db4b115e98a6e39b36.4.llvm.4016442784811617174 (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="949" width="0.7665%" height="15" fill="rgb(214,148,48)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="933" width="0.7665%" height="15" fill="rgb(232,36,49)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="917" width="0.7665%" height="15" fill="rgb(209,103,24)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="901" width="0.7665%" height="15" fill="rgb(229,88,8)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="885" width="0.7665%" height="15" fill="rgb(213,181,19)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="869" width="0.7665%" height="15" fill="rgb(254,191,54)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="879.50"></text></g><g><title>&lt;rand::distr::distribution::Iter&lt;D,R,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="853" width="0.7665%" height="15" fill="rgb(241,83,37)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="863.50"></text></g><g><title>&lt;rand::distr::other::Alphanumeric as rand::distr::distribution::Distribution&lt;u8&gt;&gt;::sample (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="837" width="0.7665%" height="15" fill="rgb(233,36,39)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="847.50"></text></g><g><title>&lt;T as rand_core::RngCore&gt;::next_u32 (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="821" width="0.7665%" height="15" fill="rgb(226,3,54)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="831.50"></text></g><g><title>&lt;rand_xoshiro::xoshiro256plus::Xoshiro256Plus as rand_core::RngCore&gt;::next_u32 (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="805" width="0.7665%" height="15" fill="rgb(245,192,40)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="815.50"></text></g><g><title>&lt;rand_xoshiro::xoshiro256plus::Xoshiro256Plus as rand_core::RngCore&gt;::next_u64 (7,755,216 samples, 0.77%)</title><rect x="55.1939%" y="789" width="0.7665%" height="15" fill="rgb(238,167,29)" fg:x="558401199" fg:w="7755216"/><text x="55.4439%" y="799.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (377,992,125 samples, 37.36%)</title><rect x="55.9604%" y="469" width="37.3618%" height="15" fill="rgb(232,182,51)" fg:x="566156415" fg:w="377992125"/><text x="56.2104%" y="479.50">&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{cl..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (377,992,125 samples, 37.36%)</title><rect x="55.9604%" y="453" width="37.3618%" height="15" fill="rgb(231,60,39)" fg:x="566156415" fg:w="377992125"/><text x="56.2104%" y="463.50">&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (377,992,125 samples, 37.36%)</title><rect x="55.9604%" y="437" width="37.3618%" height="15" fill="rgb(208,69,12)" fg:x="566156415" fg:w="377992125"/><text x="56.2104%" y="447.50">core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (377,992,125 samples, 37.36%)</title><rect x="55.9604%" y="421" width="37.3618%" height="15" fill="rgb(235,93,37)" fg:x="566156415" fg:w="377992125"/><text x="56.2104%" y="431.50">&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal</text></g><g><title>__memcmp_evex_movbe (329,763,125 samples, 32.59%)</title><rect x="60.7275%" y="405" width="32.5947%" height="15" fill="rgb(213,116,39)" fg:x="614385415" fg:w="329763125"/><text x="60.9775%" y="415.50">__memcmp_evex_movbe</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,795,294 samples, 0.47%)</title><rect x="93.3222%" y="469" width="0.4740%" height="15" fill="rgb(222,207,29)" fg:x="944148540" fg:w="4795294"/><text x="93.5722%" y="479.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4,795,294 samples, 0.47%)</title><rect x="93.3222%" y="453" width="0.4740%" height="15" fill="rgb(206,96,30)" fg:x="944148540" fg:w="4795294"/><text x="93.5722%" y="463.50"></text></g><g><title>&lt;workload_gen::keyset::VecKeySet as workload_gen::keyset::KeySet&gt;::contains (382,792,277 samples, 37.84%)</title><rect x="55.9604%" y="533" width="37.8362%" height="15" fill="rgb(218,138,4)" fg:x="566156415" fg:w="382792277"/><text x="56.2104%" y="543.50">&lt;workload_gen::keyset::VecKeySet as workload_gen::keyset::KeyS..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (382,792,277 samples, 37.84%)</title><rect x="55.9604%" y="517" width="37.8362%" height="15" fill="rgb(250,191,14)" fg:x="566156415" fg:w="382792277"/><text x="56.2104%" y="527.50">core::slice::&lt;impl [T]&gt;::contains</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (382,792,277 samples, 37.84%)</title><rect x="55.9604%" y="501" width="37.8362%" height="15" fill="rgb(239,60,40)" fg:x="566156415" fg:w="382792277"/><text x="56.2104%" y="511.50">&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (382,792,277 samples, 37.84%)</title><rect x="55.9604%" y="485" width="37.8362%" height="15" fill="rgb(206,27,48)" fg:x="566156415" fg:w="382792277"/><text x="56.2104%" y="495.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::I..</text></g><g><title>workload_gen::AsciiWriter::write_insert (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="533" width="0.1633%" height="15" fill="rgb(225,35,8)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="517" width="0.1633%" height="15" fill="rgb(250,213,24)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="501" width="0.1633%" height="15" fill="rgb(247,123,22)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="485" width="0.1633%" height="15" fill="rgb(231,138,38)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="469" width="0.1633%" height="15" fill="rgb(231,145,46)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="453" width="0.1633%" height="15" fill="rgb(251,118,11)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="463.50"></text></g><g><title>__memcpy_avx512_unaligned_erms (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="437" width="0.1633%" height="15" fill="rgb(217,147,25)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="447.50"></text></g><g><title>asm_exc_page_fault (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="421" width="0.1633%" height="15" fill="rgb(247,81,37)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="431.50"></text></g><g><title>exc_page_fault (1,652,046 samples, 0.16%)</title><rect x="93.7971%" y="405" width="0.1633%" height="15" fill="rgb(209,12,38)" fg:x="948953425" fg:w="1652046"/><text x="94.0471%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (34,021,929 samples, 3.36%)</title><rect x="93.9604%" y="421" width="3.3628%" height="15" fill="rgb(227,1,9)" fg:x="950605471" fg:w="34021929"/><text x="94.2104%" y="431.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (34,021,929 samples, 3.36%)</title><rect x="93.9604%" y="405" width="3.3628%" height="15" fill="rgb(248,47,43)" fg:x="950605471" fg:w="34021929"/><text x="94.2104%" y="415.50">all..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,397,881 samples, 2.51%)</title><rect x="94.8128%" y="389" width="2.5104%" height="15" fill="rgb(221,10,30)" fg:x="959229519" fg:w="25397881"/><text x="95.0628%" y="399.50">&lt;c..</text></g><g><title>&lt;rand::distr::distribution::Iter&lt;D,R,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,397,881 samples, 2.51%)</title><rect x="94.8128%" y="373" width="2.5104%" height="15" fill="rgb(210,229,1)" fg:x="959229519" fg:w="25397881"/><text x="95.0628%" y="383.50">&lt;r..</text></g><g><title>&lt;rand::distr::other::Alphanumeric as rand::distr::distribution::Distribution&lt;u8&gt;&gt;::sample (25,397,881 samples, 2.51%)</title><rect x="94.8128%" y="357" width="2.5104%" height="15" fill="rgb(222,148,37)" fg:x="959229519" fg:w="25397881"/><text x="95.0628%" y="367.50">&lt;r..</text></g><g><title>&lt;T as rand_core::RngCore&gt;::next_u32 (11,562,544 samples, 1.14%)</title><rect x="96.1803%" y="341" width="1.1429%" height="15" fill="rgb(234,67,33)" fg:x="973064856" fg:w="11562544"/><text x="96.4303%" y="351.50"></text></g><g><title>&lt;rand_xoshiro::xoshiro256plus::Xoshiro256Plus as rand_core::RngCore&gt;::next_u32 (11,562,544 samples, 1.14%)</title><rect x="96.1803%" y="325" width="1.1429%" height="15" fill="rgb(247,98,35)" fg:x="973064856" fg:w="11562544"/><text x="96.4303%" y="335.50"></text></g><g><title>&lt;rand_xoshiro::xoshiro256plus::Xoshiro256Plus as rand_core::RngCore&gt;::next_u64 (11,562,544 samples, 1.14%)</title><rect x="96.1803%" y="309" width="1.1429%" height="15" fill="rgb(247,138,52)" fg:x="973064856" fg:w="11562544"/><text x="96.4303%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,869,723 samples, 0.58%)</title><rect x="96.7430%" y="293" width="0.5802%" height="15" fill="rgb(213,79,30)" fg:x="978757677" fg:w="5869723"/><text x="96.9930%" y="303.50"></text></g><g><title>change_protection (10,362,180 samples, 1.02%)</title><rect x="97.3239%" y="117" width="1.0242%" height="15" fill="rgb(246,177,23)" fg:x="984634438" fg:w="10362180"/><text x="97.5739%" y="127.50"></text></g><g><title>change_protection_range (10,362,180 samples, 1.02%)</title><rect x="97.3239%" y="101" width="1.0242%" height="15" fill="rgb(230,62,27)" fg:x="984634438" fg:w="10362180"/><text x="97.5739%" y="111.50"></text></g><g><title>change_p4d_range (10,362,180 samples, 1.02%)</title><rect x="97.3239%" y="85" width="1.0242%" height="15" fill="rgb(216,154,8)" fg:x="984634438" fg:w="10362180"/><text x="97.5739%" y="95.50"></text></g><g><title>std::panic::catch_unwind (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="709" width="42.8582%" height="15" fill="rgb(244,35,45)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="693" width="42.8582%" height="15" fill="rgb(251,115,12)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="677" width="42.8582%" height="15" fill="rgb(240,54,50)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="661" width="42.8582%" height="15" fill="rgb(233,84,52)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="671.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function:..</text></g><g><title>test::run_test_in_process::_{{closure}} (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="645" width="42.8582%" height="15" fill="rgb(207,117,47)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="655.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="629" width="42.8582%" height="15" fill="rgb(249,43,39)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="639.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="613" width="42.8582%" height="15" fill="rgb(209,38,44)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="623.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="597" width="42.8582%" height="15" fill="rgb(236,212,23)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>workload_gen::tests::empty_point_queries::_{{closure}} (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="581" width="42.8582%" height="15" fill="rgb(242,79,21)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="591.50">workload_gen::tests::empty_point_queries::_{{closure}}</text></g><g><title>workload_gen::tests::empty_point_queries (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="565" width="42.8582%" height="15" fill="rgb(211,96,35)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="575.50">workload_gen::tests::empty_point_queries</text></g><g><title>workload_gen::write_operations (433,599,964 samples, 42.86%)</title><rect x="55.9604%" y="549" width="42.8582%" height="15" fill="rgb(253,215,40)" fg:x="566156415" fg:w="433599964"/><text x="56.2104%" y="559.50">workload_gen::write_operations</text></g><g><title>workload_gen::gen_string (49,150,908 samples, 4.86%)</title><rect x="93.9604%" y="533" width="4.8582%" height="15" fill="rgb(211,81,21)" fg:x="950605471" fg:w="49150908"/><text x="94.2104%" y="543.50">worklo..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (49,150,908 samples, 4.86%)</title><rect x="93.9604%" y="517" width="4.8582%" height="15" fill="rgb(208,190,38)" fg:x="950605471" fg:w="49150908"/><text x="94.2104%" y="527.50">core::..</text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;I&gt; for alloc::boxed::Box&lt;[I]&gt;&gt;::from_iter (49,150,908 samples, 4.86%)</title><rect x="93.9604%" y="501" width="4.8582%" height="15" fill="rgb(235,213,38)" fg:x="950605471" fg:w="49150908"/><text x="94.2104%" y="511.50">alloc:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (49,150,908 samples, 4.86%)</title><rect x="93.9604%" y="485" width="4.8582%" height="15" fill="rgb(237,122,38)" fg:x="950605471" fg:w="49150908"/><text x="94.2104%" y="495.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (49,150,908 samples, 4.86%)</title><rect x="93.9604%" y="469" width="4.8582%" height="15" fill="rgb(244,218,35)" fg:x="950605471" fg:w="49150908"/><text x="94.2104%" y="479.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (49,150,908 samples, 4.86%)</title><rect x="93.9604%" y="453" width="4.8582%" height="15" fill="rgb(240,68,47)" fg:x="950605471" fg:w="49150908"/><text x="94.2104%" y="463.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (49,150,908 samples, 4.86%)</title><rect x="93.9604%" y="437" width="4.8582%" height="15" fill="rgb(210,16,53)" fg:x="950605471" fg:w="49150908"/><text x="94.2104%" y="447.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15,128,676 samples, 1.50%)</title><rect x="97.3232%" y="421" width="1.4954%" height="15" fill="rgb(235,124,12)" fg:x="984627703" fg:w="15128676"/><text x="97.5732%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15,128,676 samples, 1.50%)</title><rect x="97.3232%" y="405" width="1.4954%" height="15" fill="rgb(224,169,11)" fg:x="984627703" fg:w="15128676"/><text x="97.5732%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15,128,676 samples, 1.50%)</title><rect x="97.3232%" y="389" width="1.4954%" height="15" fill="rgb(250,166,2)" fg:x="984627703" fg:w="15128676"/><text x="97.5732%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (15,128,676 samples, 1.50%)</title><rect x="97.3232%" y="373" width="1.4954%" height="15" fill="rgb(242,216,29)" fg:x="984627703" fg:w="15128676"/><text x="97.5732%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (15,128,676 samples, 1.50%)</title><rect x="97.3232%" y="357" width="1.4954%" height="15" fill="rgb(230,116,27)" fg:x="984627703" fg:w="15128676"/><text x="97.5732%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15,128,676 samples, 1.50%)</title><rect x="97.3232%" y="341" width="1.4954%" height="15" fill="rgb(228,99,48)" fg:x="984627703" fg:w="15128676"/><text x="97.5732%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15,128,676 samples, 1.50%)</title><rect x="97.3232%" y="325" width="1.4954%" height="15" fill="rgb(253,11,6)" fg:x="984627703" fg:w="15128676"/><text x="97.5732%" y="335.50"></text></g><g><title>alloc::alloc::alloc (15,128,676 samples, 1.50%)</title><rect x="97.3232%" y="309" width="1.4954%" height="15" fill="rgb(247,143,39)" fg:x="984627703" fg:w="15128676"/><text x="97.5732%" y="319.50"></text></g><g><title>__GI___libc_malloc (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="293" width="1.4947%" height="15" fill="rgb(236,97,10)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="303.50"></text></g><g><title>_int_malloc (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="277" width="1.4947%" height="15" fill="rgb(233,208,19)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="287.50"></text></g><g><title>sysmalloc (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="261" width="1.4947%" height="15" fill="rgb(216,164,2)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="271.50"></text></g><g><title>grow_heap (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="245" width="1.4947%" height="15" fill="rgb(220,129,5)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="255.50"></text></g><g><title>__GI_mprotect (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="229" width="1.4947%" height="15" fill="rgb(242,17,10)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="213" width="1.4947%" height="15" fill="rgb(242,107,0)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="223.50"></text></g><g><title>do_syscall_64 (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="197" width="1.4947%" height="15" fill="rgb(251,28,31)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="207.50"></text></g><g><title>x64_sys_call (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="181" width="1.4947%" height="15" fill="rgb(233,223,10)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="191.50"></text></g><g><title>__x64_sys_mprotect (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="165" width="1.4947%" height="15" fill="rgb(215,21,27)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="175.50"></text></g><g><title>do_mprotect_pkey (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="149" width="1.4947%" height="15" fill="rgb(232,23,21)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="159.50"></text></g><g><title>mprotect_fixup (15,121,941 samples, 1.49%)</title><rect x="97.3239%" y="133" width="1.4947%" height="15" fill="rgb(244,5,23)" fg:x="984634438" fg:w="15121941"/><text x="97.5739%" y="143.50"></text></g><g><title>perf_event_mmap (4,759,761 samples, 0.47%)</title><rect x="98.3481%" y="117" width="0.4705%" height="15" fill="rgb(226,81,46)" fg:x="994996618" fg:w="4759761"/><text x="98.5981%" y="127.50"></text></g><g><title>perf_event_mmap_event (4,759,761 samples, 0.47%)</title><rect x="98.3481%" y="101" width="0.4705%" height="15" fill="rgb(247,70,30)" fg:x="994996618" fg:w="4759761"/><text x="98.5981%" y="111.50"></text></g><g><title>perf_iterate_sb.constprop.0 (4,759,761 samples, 0.47%)</title><rect x="98.3481%" y="85" width="0.4705%" height="15" fill="rgb(212,68,19)" fg:x="994996618" fg:w="4759761"/><text x="98.5981%" y="95.50"></text></g><g><title>perf_iterate_ctx (4,759,761 samples, 0.47%)</title><rect x="98.3481%" y="69" width="0.4705%" height="15" fill="rgb(240,187,13)" fg:x="994996618" fg:w="4759761"/><text x="98.5981%" y="79.50"></text></g><g><title>perf_event_mmap_output (4,759,761 samples, 0.47%)</title><rect x="98.3481%" y="53" width="0.4705%" height="15" fill="rgb(223,113,26)" fg:x="994996618" fg:w="4759761"/><text x="98.5981%" y="63.50"></text></g><g><title>perf_output_begin (4,759,761 samples, 0.47%)</title><rect x="98.3481%" y="37" width="0.4705%" height="15" fill="rgb(206,192,2)" fg:x="994996618" fg:w="4759761"/><text x="98.5981%" y="47.50"></text></g><g><title>__GI___clone3 (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="965" width="43.3257%" height="15" fill="rgb(241,108,4)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="975.50">__GI___clone3</text></g><g><title>start_thread (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="949" width="43.3257%" height="15" fill="rgb(247,173,49)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="959.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="933" width="43.3257%" height="15" fill="rgb(224,114,35)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="943.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="917" width="43.3257%" height="15" fill="rgb(245,159,27)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="927.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="901" width="43.3257%" height="15" fill="rgb(245,172,44)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="911.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="885" width="43.3257%" height="15" fill="rgb(236,23,11)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="895.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="869" width="43.3257%" height="15" fill="rgb(205,117,38)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="879.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="853" width="43.3257%" height="15" fill="rgb(237,72,25)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="837" width="43.3257%" height="15" fill="rgb(244,70,9)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="821" width="43.3257%" height="15" fill="rgb(217,125,39)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="831.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="805" width="43.3257%" height="15" fill="rgb(235,36,10)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="815.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="789" width="43.3257%" height="15" fill="rgb(251,123,47)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="799.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="773" width="43.3257%" height="15" fill="rgb(221,13,13)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="783.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="757" width="43.3257%" height="15" fill="rgb(238,131,9)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="767.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="741" width="43.3257%" height="15" fill="rgb(211,50,8)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="751.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (438,329,586 samples, 43.33%)</title><rect x="55.9604%" y="725" width="43.3257%" height="15" fill="rgb(245,182,24)" fg:x="566156415" fg:w="438329586"/><text x="56.2104%" y="735.50">test::run_test_in_process</text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="709" width="0.4675%" height="15" fill="rgb(242,14,37)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="719.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="693" width="0.4675%" height="15" fill="rgb(246,228,12)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="703.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="677" width="0.4675%" height="15" fill="rgb(213,55,15)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="687.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::start_send (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="661" width="0.4675%" height="15" fill="rgb(209,9,3)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="671.50"></text></g><g><title>std::sync::mpmc::list::Block&lt;T&gt;::new (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="645" width="0.4675%" height="15" fill="rgb(230,59,30)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_zeroed (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="629" width="0.4675%" height="15" fill="rgb(209,121,21)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_zeroed_in (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="613" width="0.4675%" height="15" fill="rgb(220,109,13)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_zeroed_in (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="597" width="0.4675%" height="15" fill="rgb(232,18,1)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="581" width="0.4675%" height="15" fill="rgb(215,41,42)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="565" width="0.4675%" height="15" fill="rgb(224,123,36)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="575.50"></text></g><g><title>alloc::alloc::alloc_zeroed (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="549" width="0.4675%" height="15" fill="rgb(240,125,3)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="559.50"></text></g><g><title>__libc_calloc (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="533" width="0.4675%" height="15" fill="rgb(205,98,50)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="543.50"></text></g><g><title>_int_malloc (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="517" width="0.4675%" height="15" fill="rgb(205,185,37)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="527.50"></text></g><g><title>malloc_consolidate (4,729,622 samples, 0.47%)</title><rect x="98.8186%" y="501" width="0.4675%" height="15" fill="rgb(238,207,15)" fg:x="999756379" fg:w="4729622"/><text x="99.0686%" y="511.50"></text></g><g><title>tests::empty_po (1,011,233,393 samples, 99.95%)</title><rect x="0.0010%" y="981" width="99.9530%" height="15" fill="rgb(213,199,42)" fg:x="10008" fg:w="1011233393"/><text x="0.2510%" y="991.50">tests::empty_po</text></g><g><title>_int_malloc (6,757,400 samples, 0.67%)</title><rect x="99.2861%" y="965" width="0.6679%" height="15" fill="rgb(235,201,11)" fg:x="1004486001" fg:w="6757400"/><text x="99.5361%" y="975.50"></text></g><g><title>__GI___clone3 (120,240 samples, 0.01%)</title><rect x="99.9540%" y="965" width="0.0119%" height="15" fill="rgb(207,46,11)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="975.50"></text></g><g><title>start_thread (120,240 samples, 0.01%)</title><rect x="99.9540%" y="949" width="0.0119%" height="15" fill="rgb(241,35,35)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="959.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (120,240 samples, 0.01%)</title><rect x="99.9540%" y="933" width="0.0119%" height="15" fill="rgb(243,32,47)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="943.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (120,240 samples, 0.01%)</title><rect x="99.9540%" y="917" width="0.0119%" height="15" fill="rgb(247,202,23)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="927.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (120,240 samples, 0.01%)</title><rect x="99.9540%" y="901" width="0.0119%" height="15" fill="rgb(219,102,11)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="911.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (120,240 samples, 0.01%)</title><rect x="99.9540%" y="885" width="0.0119%" height="15" fill="rgb(243,110,44)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="895.50"></text></g><g><title>__pthread_getattr_np (120,240 samples, 0.01%)</title><rect x="99.9540%" y="869" width="0.0119%" height="15" fill="rgb(222,74,54)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="879.50"></text></g><g><title>__GI___libc_malloc (120,240 samples, 0.01%)</title><rect x="99.9540%" y="853" width="0.0119%" height="15" fill="rgb(216,99,12)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="863.50"></text></g><g><title>tcache_init (120,240 samples, 0.01%)</title><rect x="99.9540%" y="837" width="0.0119%" height="15" fill="rgb(226,22,26)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="847.50"></text></g><g><title>_int_malloc (120,240 samples, 0.01%)</title><rect x="99.9540%" y="821" width="0.0119%" height="15" fill="rgb(217,163,10)" fg:x="1011243401" fg:w="120240"/><text x="100.2040%" y="831.50"></text></g><g><title>_start (339,293 samples, 0.03%)</title><rect x="99.9664%" y="965" width="0.0335%" height="15" fill="rgb(213,25,53)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="975.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (339,293 samples, 0.03%)</title><rect x="99.9664%" y="949" width="0.0335%" height="15" fill="rgb(252,105,26)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="959.50"></text></g><g><title>do_syscall_64 (339,293 samples, 0.03%)</title><rect x="99.9664%" y="933" width="0.0335%" height="15" fill="rgb(220,39,43)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="943.50"></text></g><g><title>x64_sys_call (339,293 samples, 0.03%)</title><rect x="99.9664%" y="917" width="0.0335%" height="15" fill="rgb(229,68,48)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="927.50"></text></g><g><title>__x64_sys_execve (339,293 samples, 0.03%)</title><rect x="99.9664%" y="901" width="0.0335%" height="15" fill="rgb(252,8,32)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="911.50"></text></g><g><title>do_execveat_common.isra.0 (339,293 samples, 0.03%)</title><rect x="99.9664%" y="885" width="0.0335%" height="15" fill="rgb(223,20,43)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="895.50"></text></g><g><title>bprm_execve (339,293 samples, 0.03%)</title><rect x="99.9664%" y="869" width="0.0335%" height="15" fill="rgb(229,81,49)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="879.50"></text></g><g><title>bprm_execve.part.0 (339,293 samples, 0.03%)</title><rect x="99.9664%" y="853" width="0.0335%" height="15" fill="rgb(236,28,36)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="863.50"></text></g><g><title>sched_mm_cid_after_execve (339,293 samples, 0.03%)</title><rect x="99.9664%" y="837" width="0.0335%" height="15" fill="rgb(249,185,26)" fg:x="1011369041" fg:w="339293"/><text x="100.2164%" y="847.50"></text></g><g><title>all (1,011,708,638 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="1011708638"/><text x="0.2500%" y="1007.50"></text></g><g><title>workload_gen-c6 (465,237 samples, 0.05%)</title><rect x="99.9540%" y="981" width="0.0460%" height="15" fill="rgb(233,201,37)" fg:x="1011243401" fg:w="465237"/><text x="100.2040%" y="991.50"></text></g></svg></svg>