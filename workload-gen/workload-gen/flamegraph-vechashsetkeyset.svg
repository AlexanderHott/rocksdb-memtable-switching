<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="198608609"><g><title>[anon] (11,298,502 samples, 5.69%)</title><rect x="0.0022%" y="949" width="5.6888%" height="15" fill="rgb(227,0,7)" fg:x="4344" fg:w="11298502"/><text x="0.2522%" y="959.50">[anon]</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11,298,502 samples, 5.69%)</title><rect x="0.0022%" y="933" width="5.6888%" height="15" fill="rgb(217,0,24)" fg:x="4344" fg:w="11298502"/><text x="0.2522%" y="943.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (11,298,502 samples, 5.69%)</title><rect x="0.0022%" y="917" width="5.6888%" height="15" fill="rgb(221,193,54)" fg:x="4344" fg:w="11298502"/><text x="0.2522%" y="927.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11,298,502 samples, 5.69%)</title><rect x="0.0022%" y="901" width="5.6888%" height="15" fill="rgb(248,212,6)" fg:x="4344" fg:w="11298502"/><text x="0.2522%" y="911.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (11,298,502 samples, 5.69%)</title><rect x="0.0022%" y="885" width="5.6888%" height="15" fill="rgb(208,68,35)" fg:x="4344" fg:w="11298502"/><text x="0.2522%" y="895.50">alloc::..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,835,679 samples, 2.43%)</title><rect x="3.2562%" y="869" width="2.4348%" height="15" fill="rgb(232,128,0)" fg:x="6467167" fg:w="4835679"/><text x="3.5062%" y="879.50">&lt;c..</text></g><g><title>&lt;rand::distr::distribution::Iter&lt;D,R,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,835,679 samples, 2.43%)</title><rect x="3.2562%" y="853" width="2.4348%" height="15" fill="rgb(207,160,47)" fg:x="6467167" fg:w="4835679"/><text x="3.5062%" y="863.50">&lt;r..</text></g><g><title>&lt;rand::distr::other::Alphanumeric as rand::distr::distribution::Distribution&lt;u8&gt;&gt;::sample (4,835,679 samples, 2.43%)</title><rect x="3.2562%" y="837" width="2.4348%" height="15" fill="rgb(228,23,34)" fg:x="6467167" fg:w="4835679"/><text x="3.5062%" y="847.50">&lt;r..</text></g><g><title>&lt;T as rand_core::RngCore&gt;::next_u32 (4,835,679 samples, 2.43%)</title><rect x="3.2562%" y="821" width="2.4348%" height="15" fill="rgb(218,30,26)" fg:x="6467167" fg:w="4835679"/><text x="3.5062%" y="831.50">&lt;T..</text></g><g><title>&lt;rand_xoshiro::xoshiro256plus::Xoshiro256Plus as rand_core::RngCore&gt;::next_u32 (4,835,679 samples, 2.43%)</title><rect x="3.2562%" y="805" width="2.4348%" height="15" fill="rgb(220,122,19)" fg:x="6467167" fg:w="4835679"/><text x="3.5062%" y="815.50">&lt;r..</text></g><g><title>&lt;rand_xoshiro::xoshiro256plus::Xoshiro256Plus as rand_core::RngCore&gt;::next_u64 (4,835,679 samples, 2.43%)</title><rect x="3.2562%" y="789" width="2.4348%" height="15" fill="rgb(250,228,42)" fg:x="6467167" fg:w="4835679"/><text x="3.5062%" y="799.50">&lt;r..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9,279,754 samples, 4.67%)</title><rect x="5.6910%" y="933" width="4.6724%" height="15" fill="rgb(240,193,28)" fg:x="11302846" fg:w="9279754"/><text x="5.9410%" y="943.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9,279,754 samples, 4.67%)</title><rect x="5.6910%" y="917" width="4.6724%" height="15" fill="rgb(216,20,37)" fg:x="11302846" fg:w="9279754"/><text x="5.9410%" y="927.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9,279,754 samples, 4.67%)</title><rect x="5.6910%" y="901" width="4.6724%" height="15" fill="rgb(206,188,39)" fg:x="11302846" fg:w="9279754"/><text x="5.9410%" y="911.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (9,279,754 samples, 4.67%)</title><rect x="5.6910%" y="885" width="4.6724%" height="15" fill="rgb(217,207,13)" fg:x="11302846" fg:w="9279754"/><text x="5.9410%" y="895.50">alloc..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,279,754 samples, 4.67%)</title><rect x="5.6910%" y="869" width="4.6724%" height="15" fill="rgb(231,73,38)" fg:x="11302846" fg:w="9279754"/><text x="5.9410%" y="879.50">&lt;core..</text></g><g><title>&lt;rand::distr::distribution::Iter&lt;D,R,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,279,754 samples, 4.67%)</title><rect x="5.6910%" y="853" width="4.6724%" height="15" fill="rgb(225,20,46)" fg:x="11302846" fg:w="9279754"/><text x="5.9410%" y="863.50">&lt;rand..</text></g><g><title>&lt;rand::distr::other::Alphanumeric as rand::distr::distribution::Distribution&lt;u8&gt;&gt;::sample (9,279,754 samples, 4.67%)</title><rect x="5.6910%" y="837" width="4.6724%" height="15" fill="rgb(210,31,41)" fg:x="11302846" fg:w="9279754"/><text x="5.9410%" y="847.50">&lt;rand..</text></g><g><title>&lt;workload_gen::keyset::VecHashSetKeySet as workload_gen::keyset::KeySet&gt;::push (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="933" width="2.8059%" height="15" fill="rgb(221,200,47)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="943.50">&lt;w..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="917" width="2.8059%" height="15" fill="rgb(226,26,5)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="927.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="901" width="2.8059%" height="15" fill="rgb(249,33,26)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="911.50">al..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="885" width="2.8059%" height="15" fill="rgb(235,183,28)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="895.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="869" width="2.8059%" height="15" fill="rgb(221,5,38)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="879.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="853" width="2.8059%" height="15" fill="rgb(247,18,42)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="863.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="837" width="2.8059%" height="15" fill="rgb(241,131,45)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="847.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="821" width="2.8059%" height="15" fill="rgb(249,31,29)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="831.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="805" width="2.8059%" height="15" fill="rgb(225,111,53)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="815.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="789" width="2.8059%" height="15" fill="rgb(238,160,17)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="799.50">al..</text></g><g><title>alloc::alloc::alloc (5,572,712 samples, 2.81%)</title><rect x="10.3634%" y="773" width="2.8059%" height="15" fill="rgb(214,148,48)" fg:x="20582600" fg:w="5572712"/><text x="10.6134%" y="783.50">al..</text></g><g><title>__GI___libc_malloc (4,245,536 samples, 2.14%)</title><rect x="13.1693%" y="933" width="2.1376%" height="15" fill="rgb(232,36,49)" fg:x="26155312" fg:w="4245536"/><text x="13.4193%" y="943.50">_..</text></g><g><title>core::str::converts::from_utf8 (4,863,830 samples, 2.45%)</title><rect x="15.3069%" y="933" width="2.4490%" height="15" fill="rgb(209,103,24)" fg:x="30400848" fg:w="4863830"/><text x="15.5569%" y="943.50">co..</text></g><g><title>[unknown] (28,750,107 samples, 14.48%)</title><rect x="5.6910%" y="949" width="14.4758%" height="15" fill="rgb(229,88,8)" fg:x="11302846" fg:w="28750107"/><text x="5.9410%" y="959.50">[unknown]</text></g><g><title>workload_gen::write_operations (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="933" width="2.4109%" height="15" fill="rgb(213,181,19)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="943.50">wo..</text></g><g><title>core::ptr::drop_in_place&lt;workload_gen::keyset::VecHashSetKeySet&gt; (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="917" width="2.4109%" height="15" fill="rgb(254,191,54)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="927.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt; (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="901" width="2.4109%" height="15" fill="rgb(241,83,37)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="911.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::boxed::Box&lt;[u8]&gt;,std::hash::random::RandomState&gt;&gt; (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="885" width="2.4109%" height="15" fill="rgb(233,36,39)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="895.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::boxed::Box&lt;[u8]&gt;,(),std::hash::random::RandomState&gt;&gt; (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="869" width="2.4109%" height="15" fill="rgb(226,3,54)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="879.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::boxed::Box&lt;[u8]&gt;,())&gt;&gt; (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="853" width="2.4109%" height="15" fill="rgb(245,192,40)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="863.50">co..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="837" width="2.4109%" height="15" fill="rgb(238,167,29)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="847.50">&lt;h..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="821" width="2.4109%" height="15" fill="rgb(232,182,51)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="831.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="805" width="2.4109%" height="15" fill="rgb(231,60,39)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="815.50">ha..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="789" width="2.4109%" height="15" fill="rgb(208,69,12)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="799.50">ha..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="773" width="2.4109%" height="15" fill="rgb(235,93,37)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="783.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::boxed::Box&lt;[u8]&gt;,())&gt; (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="757" width="2.4109%" height="15" fill="rgb(213,116,39)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="767.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="741" width="2.4109%" height="15" fill="rgb(222,207,29)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="751.50">co..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="725" width="2.4109%" height="15" fill="rgb(206,96,30)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="735.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="709" width="2.4109%" height="15" fill="rgb(218,138,4)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="719.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (4,788,275 samples, 2.41%)</title><rect x="17.7559%" y="693" width="2.4109%" height="15" fill="rgb(250,191,14)" fg:x="35264678" fg:w="4788275"/><text x="18.0059%" y="703.50">al..</text></g><g><title>core::iter::traits::iterator::Iterator::count (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="533" width="2.0987%" height="15" fill="rgb(239,60,40)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="543.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="517" width="2.0987%" height="15" fill="rgb(206,27,48)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="527.50">c..</text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="501" width="2.0987%" height="15" fill="rgb(225,35,8)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="511.50">&lt;..</text></g><g><title>std::io::BufRead::read_line (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="485" width="2.0987%" height="15" fill="rgb(250,213,24)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="495.50">s..</text></g><g><title>std::io::append_to_string (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="469" width="2.0987%" height="15" fill="rgb(247,123,22)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="479.50">s..</text></g><g><title>std::io::BufRead::read_line::_{{closure}} (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="453" width="2.0987%" height="15" fill="rgb(231,138,38)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="463.50">s..</text></g><g><title>std::io::read_until (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="437" width="2.0987%" height="15" fill="rgb(231,145,46)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="447.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="421" width="2.0987%" height="15" fill="rgb(251,118,11)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="431.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="405" width="2.0987%" height="15" fill="rgb(217,147,25)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="415.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="389" width="2.0987%" height="15" fill="rgb(247,81,37)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="399.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="373" width="2.0987%" height="15" fill="rgb(209,12,38)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="383.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="357" width="2.0987%" height="15" fill="rgb(227,1,9)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="367.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="341" width="2.0987%" height="15" fill="rgb(248,47,43)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="325" width="2.0987%" height="15" fill="rgb(221,10,30)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="309" width="2.0987%" height="15" fill="rgb(210,229,1)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="319.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="293" width="2.0987%" height="15" fill="rgb(222,148,37)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="303.50">a..</text></g><g><title>core::slice::memchr::memchr_aligned (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="277" width="2.0987%" height="15" fill="rgb(234,67,33)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="287.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (4,168,217 samples, 2.10%)</title><rect x="20.1668%" y="261" width="2.0987%" height="15" fill="rgb(247,98,35)" fg:x="40052953" fg:w="4168217"/><text x="20.4168%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="533" width="2.2023%" height="15" fill="rgb(247,138,52)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="517" width="2.2023%" height="15" fill="rgb(213,79,30)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="527.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="501" width="2.2023%" height="15" fill="rgb(246,177,23)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="511.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="485" width="2.2023%" height="15" fill="rgb(230,62,27)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="495.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="469" width="2.2023%" height="15" fill="rgb(216,154,8)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="479.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="453" width="2.2023%" height="15" fill="rgb(244,35,45)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="463.50">a..</text></g><g><title>__GI___libc_free (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="437" width="2.2023%" height="15" fill="rgb(251,115,12)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="447.50">_..</text></g><g><title>__GI_munmap (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="421" width="2.2023%" height="15" fill="rgb(240,54,50)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="431.50">_..</text></g><g><title>entry_SYSCALL_64_after_hwframe (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="405" width="2.2023%" height="15" fill="rgb(233,84,52)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="415.50">e..</text></g><g><title>do_syscall_64 (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="389" width="2.2023%" height="15" fill="rgb(207,117,47)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="399.50">d..</text></g><g><title>x64_sys_call (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="373" width="2.2023%" height="15" fill="rgb(249,43,39)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="383.50">x..</text></g><g><title>__x64_sys_munmap (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="357" width="2.2023%" height="15" fill="rgb(209,38,44)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="367.50">_..</text></g><g><title>__vm_munmap (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="341" width="2.2023%" height="15" fill="rgb(236,212,23)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="351.50">_..</text></g><g><title>do_vmi_munmap (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="325" width="2.2023%" height="15" fill="rgb(242,79,21)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="335.50">d..</text></g><g><title>do_vmi_align_munmap (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="309" width="2.2023%" height="15" fill="rgb(211,96,35)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="319.50">d..</text></g><g><title>unmap_region.constprop.0 (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="293" width="2.2023%" height="15" fill="rgb(253,215,40)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="303.50">u..</text></g><g><title>tlb_finish_mmu (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="277" width="2.2023%" height="15" fill="rgb(211,81,21)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="287.50">t..</text></g><g><title>__tlb_batch_free_encoded_pages (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="261" width="2.2023%" height="15" fill="rgb(208,190,38)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="271.50">_..</text></g><g><title>free_pages_and_swap_cache (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="245" width="2.2023%" height="15" fill="rgb(235,213,38)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="255.50">f..</text></g><g><title>folios_put_refs (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="229" width="2.2023%" height="15" fill="rgb(237,122,38)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="239.50">f..</text></g><g><title>__page_cache_release.part.0 (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="213" width="2.2023%" height="15" fill="rgb(244,218,35)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="223.50">_..</text></g><g><title>lru_gen_del_folio.constprop.0 (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="197" width="2.2023%" height="15" fill="rgb(240,68,47)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="207.50">l..</text></g><g><title>__mod_lruvec_state (4,373,880 samples, 2.20%)</title><rect x="22.2655%" y="181" width="2.2023%" height="15" fill="rgb(210,16,53)" fg:x="44221170" fg:w="4373880"/><text x="22.5155%" y="191.50">_..</text></g><g><title>&lt;workload_gen::keyset::VecHashSetKeySet as workload_gen::keyset::KeySet&gt;::new (370,074 samples, 0.19%)</title><rect x="24.4677%" y="517" width="0.1863%" height="15" fill="rgb(235,124,12)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="527.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::with_capacity (370,074 samples, 0.19%)</title><rect x="24.4677%" y="501" width="0.1863%" height="15" fill="rgb(224,169,11)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="511.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::with_capacity_and_hasher (370,074 samples, 0.19%)</title><rect x="24.4677%" y="485" width="0.1863%" height="15" fill="rgb(250,166,2)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="495.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::with_capacity_and_hasher (370,074 samples, 0.19%)</title><rect x="24.4677%" y="469" width="0.1863%" height="15" fill="rgb(242,216,29)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (370,074 samples, 0.19%)</title><rect x="24.4677%" y="453" width="0.1863%" height="15" fill="rgb(230,116,27)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (370,074 samples, 0.19%)</title><rect x="24.4677%" y="437" width="0.1863%" height="15" fill="rgb(228,99,48)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (370,074 samples, 0.19%)</title><rect x="24.4677%" y="421" width="0.1863%" height="15" fill="rgb(253,11,6)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (370,074 samples, 0.19%)</title><rect x="24.4677%" y="405" width="0.1863%" height="15" fill="rgb(247,143,39)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (370,074 samples, 0.19%)</title><rect x="24.4677%" y="389" width="0.1863%" height="15" fill="rgb(236,97,10)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="399.50"></text></g><g><title>hashbrown::control::tag::TagSliceExt::fill_empty (370,074 samples, 0.19%)</title><rect x="24.4677%" y="373" width="0.1863%" height="15" fill="rgb(233,208,19)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="383.50"></text></g><g><title>&lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag (370,074 samples, 0.19%)</title><rect x="24.4677%" y="357" width="0.1863%" height="15" fill="rgb(216,164,2)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (370,074 samples, 0.19%)</title><rect x="24.4677%" y="341" width="0.1863%" height="15" fill="rgb(220,129,5)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="351.50"></text></g><g><title>core::intrinsics::write_bytes (370,074 samples, 0.19%)</title><rect x="24.4677%" y="325" width="0.1863%" height="15" fill="rgb(242,17,10)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="335.50"></text></g><g><title>__memset_avx512_unaligned_erms (370,074 samples, 0.19%)</title><rect x="24.4677%" y="309" width="0.1863%" height="15" fill="rgb(242,107,0)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="319.50"></text></g><g><title>asm_exc_page_fault (370,074 samples, 0.19%)</title><rect x="24.4677%" y="293" width="0.1863%" height="15" fill="rgb(251,28,31)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="303.50"></text></g><g><title>exc_page_fault (370,074 samples, 0.19%)</title><rect x="24.4677%" y="277" width="0.1863%" height="15" fill="rgb(233,223,10)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="287.50"></text></g><g><title>do_user_addr_fault (370,074 samples, 0.19%)</title><rect x="24.4677%" y="261" width="0.1863%" height="15" fill="rgb(215,21,27)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="271.50"></text></g><g><title>handle_mm_fault (370,074 samples, 0.19%)</title><rect x="24.4677%" y="245" width="0.1863%" height="15" fill="rgb(232,23,21)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="255.50"></text></g><g><title>__handle_mm_fault (370,074 samples, 0.19%)</title><rect x="24.4677%" y="229" width="0.1863%" height="15" fill="rgb(244,5,23)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="239.50"></text></g><g><title>handle_pte_fault (370,074 samples, 0.19%)</title><rect x="24.4677%" y="213" width="0.1863%" height="15" fill="rgb(226,81,46)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="223.50"></text></g><g><title>do_anonymous_page (370,074 samples, 0.19%)</title><rect x="24.4677%" y="197" width="0.1863%" height="15" fill="rgb(247,70,30)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="207.50"></text></g><g><title>alloc_anon_folio (370,074 samples, 0.19%)</title><rect x="24.4677%" y="181" width="0.1863%" height="15" fill="rgb(212,68,19)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="191.50"></text></g><g><title>vma_alloc_folio_noprof (370,074 samples, 0.19%)</title><rect x="24.4677%" y="165" width="0.1863%" height="15" fill="rgb(240,187,13)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="175.50"></text></g><g><title>folio_alloc_mpol_noprof (370,074 samples, 0.19%)</title><rect x="24.4677%" y="149" width="0.1863%" height="15" fill="rgb(223,113,26)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="159.50"></text></g><g><title>alloc_pages_mpol_noprof (370,074 samples, 0.19%)</title><rect x="24.4677%" y="133" width="0.1863%" height="15" fill="rgb(206,192,2)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="143.50"></text></g><g><title>__alloc_pages_noprof (370,074 samples, 0.19%)</title><rect x="24.4677%" y="117" width="0.1863%" height="15" fill="rgb(241,108,4)" fg:x="48595050" fg:w="370074"/><text x="24.7177%" y="127.50"></text></g><g><title>mas_preallocate (10,631,840 samples, 5.35%)</title><rect x="24.6541%" y="133" width="5.3532%" height="15" fill="rgb(247,173,49)" fg:x="48965124" fg:w="10631840"/><text x="24.9041%" y="143.50">mas_pre..</text></g><g><title>mt_find (4,849,674 samples, 2.44%)</title><rect x="30.0072%" y="133" width="2.4418%" height="15" fill="rgb(224,114,35)" fg:x="59596964" fg:w="4849674"/><text x="30.2572%" y="143.50">mt..</text></g><g><title>__GI___libc_malloc (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="341" width="10.2263%" height="15" fill="rgb(245,159,27)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="351.50">__GI___libc_mal..</text></g><g><title>_int_malloc (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="325" width="10.2263%" height="15" fill="rgb(245,172,44)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="335.50">_int_malloc</text></g><g><title>sysmalloc (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="309" width="10.2263%" height="15" fill="rgb(236,23,11)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="319.50">sysmalloc</text></g><g><title>grow_heap (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="293" width="10.2263%" height="15" fill="rgb(205,117,38)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="303.50">grow_heap</text></g><g><title>__GI_mprotect (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="277" width="10.2263%" height="15" fill="rgb(237,72,25)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="287.50">__GI_mprotect</text></g><g><title>entry_SYSCALL_64_after_hwframe (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="261" width="10.2263%" height="15" fill="rgb(244,70,9)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="271.50">entry_SYSCALL_6..</text></g><g><title>do_syscall_64 (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="245" width="10.2263%" height="15" fill="rgb(217,125,39)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="255.50">do_syscall_64</text></g><g><title>x64_sys_call (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="229" width="10.2263%" height="15" fill="rgb(235,36,10)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="239.50">x64_sys_call</text></g><g><title>__x64_sys_mprotect (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="213" width="10.2263%" height="15" fill="rgb(251,123,47)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="223.50">__x64_sys_mprot..</text></g><g><title>do_mprotect_pkey (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="197" width="10.2263%" height="15" fill="rgb(221,13,13)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="207.50">do_mprotect_pkey</text></g><g><title>mprotect_fixup (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="181" width="10.2263%" height="15" fill="rgb(238,131,9)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="191.50">mprotect_fixup</text></g><g><title>vma_modify (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="165" width="10.2263%" height="15" fill="rgb(211,50,8)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="175.50">vma_modify</text></g><g><title>vma_merge (20,310,359 samples, 10.23%)</title><rect x="24.6541%" y="149" width="10.2263%" height="15" fill="rgb(245,182,24)" fg:x="48965124" fg:w="20310359"/><text x="24.9041%" y="159.50">vma_merge</text></g><g><title>vma_adjust_trans_huge (4,828,845 samples, 2.43%)</title><rect x="32.4491%" y="133" width="2.4313%" height="15" fill="rgb(242,14,37)" fg:x="64446638" fg:w="4828845"/><text x="32.6991%" y="143.50">vm..</text></g><g><title>find_vma (4,828,845 samples, 2.43%)</title><rect x="32.4491%" y="117" width="2.4313%" height="15" fill="rgb(246,228,12)" fg:x="64446638" fg:w="4828845"/><text x="32.6991%" y="127.50">fi..</text></g><g><title>mt_find (4,828,845 samples, 2.43%)</title><rect x="32.4491%" y="101" width="2.4313%" height="15" fill="rgb(213,55,15)" fg:x="64446638" fg:w="4828845"/><text x="32.6991%" y="111.50">mt..</text></g><g><title>&lt;workload_gen::keyset::VecHashSetKeySet as workload_gen::keyset::KeySet&gt;::push (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="517" width="12.7411%" height="15" fill="rgb(209,9,3)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="527.50">&lt;workload_gen::keys..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="501" width="12.7411%" height="15" fill="rgb(230,59,30)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="511.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="485" width="12.7411%" height="15" fill="rgb(209,121,21)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="495.50">alloc::slice::&lt;impl..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="469" width="12.7411%" height="15" fill="rgb(220,109,13)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="479.50">&lt;T as alloc::slice:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="453" width="12.7411%" height="15" fill="rgb(232,18,1)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="463.50">alloc::vec::Vec&lt;T,A..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="437" width="12.7411%" height="15" fill="rgb(215,41,42)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="447.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="421" width="12.7411%" height="15" fill="rgb(224,123,36)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="431.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="405" width="12.7411%" height="15" fill="rgb(240,125,3)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="415.50">alloc::raw_vec::Raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="389" width="12.7411%" height="15" fill="rgb(205,98,50)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="399.50">&lt;alloc::alloc::Glob..</text></g><g><title>alloc::alloc::Global::alloc_impl (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="373" width="12.7411%" height="15" fill="rgb(205,185,37)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="383.50">alloc::alloc::Globa..</text></g><g><title>alloc::alloc::alloc (25,304,968 samples, 12.74%)</title><rect x="24.6541%" y="357" width="12.7411%" height="15" fill="rgb(238,207,15)" fg:x="48965124" fg:w="25304968"/><text x="24.9041%" y="367.50">alloc::alloc::alloc</text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;I&gt; for alloc::boxed::Box&lt;[I]&gt;&gt;::from_iter (4,994,609 samples, 2.51%)</title><rect x="34.8804%" y="341" width="2.5148%" height="15" fill="rgb(213,199,42)" fg:x="69275483" fg:w="4994609"/><text x="35.1304%" y="351.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (4,994,609 samples, 2.51%)</title><rect x="34.8804%" y="325" width="2.5148%" height="15" fill="rgb(235,201,11)" fg:x="69275483" fg:w="4994609"/><text x="35.1304%" y="335.50">al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt; (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="501" width="2.4115%" height="15" fill="rgb(207,46,11)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="511.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt; (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="485" width="2.4115%" height="15" fill="rgb(241,35,35)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="495.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="469" width="2.4115%" height="15" fill="rgb(243,32,47)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="479.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="453" width="2.4115%" height="15" fill="rgb(247,202,23)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="463.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="437" width="2.4115%" height="15" fill="rgb(219,102,11)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="447.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="421" width="2.4115%" height="15" fill="rgb(243,110,44)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="431.50">al..</text></g><g><title>__GI___libc_free (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="405" width="2.4115%" height="15" fill="rgb(222,74,54)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="415.50">__..</text></g><g><title>__GI_munmap (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="389" width="2.4115%" height="15" fill="rgb(216,99,12)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="399.50">__..</text></g><g><title>entry_SYSCALL_64_after_hwframe (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="373" width="2.4115%" height="15" fill="rgb(226,22,26)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="383.50">en..</text></g><g><title>do_syscall_64 (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="357" width="2.4115%" height="15" fill="rgb(217,163,10)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="367.50">do..</text></g><g><title>x64_sys_call (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="341" width="2.4115%" height="15" fill="rgb(213,25,53)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="351.50">x6..</text></g><g><title>__x64_sys_munmap (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="325" width="2.4115%" height="15" fill="rgb(252,105,26)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="335.50">__..</text></g><g><title>__vm_munmap (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="309" width="2.4115%" height="15" fill="rgb(220,39,43)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="319.50">__..</text></g><g><title>do_vmi_munmap (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="293" width="2.4115%" height="15" fill="rgb(229,68,48)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="303.50">do..</text></g><g><title>do_vmi_align_munmap (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="277" width="2.4115%" height="15" fill="rgb(252,8,32)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="287.50">do..</text></g><g><title>unmap_region.constprop.0 (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="261" width="2.4115%" height="15" fill="rgb(223,20,43)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="271.50">un..</text></g><g><title>tlb_finish_mmu (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="245" width="2.4115%" height="15" fill="rgb(229,81,49)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="255.50">tl..</text></g><g><title>__tlb_batch_free_encoded_pages (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="229" width="2.4115%" height="15" fill="rgb(236,28,36)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="239.50">__..</text></g><g><title>free_pages_and_swap_cache (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="213" width="2.4115%" height="15" fill="rgb(249,185,26)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="223.50">fr..</text></g><g><title>folios_put_refs (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="197" width="2.4115%" height="15" fill="rgb(249,174,33)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="207.50">fo..</text></g><g><title>__page_cache_release.part.0 (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="181" width="2.4115%" height="15" fill="rgb(233,201,37)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="191.50">__..</text></g><g><title>lru_gen_del_folio.constprop.0 (4,789,476 samples, 2.41%)</title><rect x="37.3952%" y="165" width="2.4115%" height="15" fill="rgb(221,78,26)" fg:x="74270092" fg:w="4789476"/><text x="37.6452%" y="175.50">lr..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,577,891 samples, 0.79%)</title><rect x="39.8067%" y="309" width="0.7945%" height="15" fill="rgb(250,127,30)" fg:x="79059568" fg:w="1577891"/><text x="40.0567%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1,577,891 samples, 0.79%)</title><rect x="39.8067%" y="293" width="0.7945%" height="15" fill="rgb(230,49,44)" fg:x="79059568" fg:w="1577891"/><text x="40.0567%" y="303.50"></text></g><g><title>__GI___libc_free (1,577,891 samples, 0.79%)</title><rect x="39.8067%" y="277" width="0.7945%" height="15" fill="rgb(229,67,23)" fg:x="79059568" fg:w="1577891"/><text x="40.0567%" y="287.50"></text></g><g><title>_int_free (76,361 samples, 0.04%)</title><rect x="40.5627%" y="261" width="0.0384%" height="15" fill="rgb(249,83,47)" fg:x="80561098" fg:w="76361"/><text x="40.8127%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;workload_gen::keyset::VecHashSetKeySet&gt; (6,371,475 samples, 3.21%)</title><rect x="37.3952%" y="517" width="3.2081%" height="15" fill="rgb(215,43,3)" fg:x="74270092" fg:w="6371475"/><text x="37.6452%" y="527.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt; (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="501" width="0.7965%" height="15" fill="rgb(238,154,13)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::boxed::Box&lt;[u8]&gt;,std::hash::random::RandomState&gt;&gt; (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="485" width="0.7965%" height="15" fill="rgb(219,56,2)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::boxed::Box&lt;[u8]&gt;,(),std::hash::random::RandomState&gt;&gt; (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="469" width="0.7965%" height="15" fill="rgb(233,0,4)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::boxed::Box&lt;[u8]&gt;,())&gt;&gt; (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="453" width="0.7965%" height="15" fill="rgb(235,30,7)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="437" width="0.7965%" height="15" fill="rgb(250,79,13)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="421" width="0.7965%" height="15" fill="rgb(211,146,34)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="405" width="0.7965%" height="15" fill="rgb(228,22,38)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="389" width="0.7965%" height="15" fill="rgb(235,168,5)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="373" width="0.7965%" height="15" fill="rgb(221,155,16)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::boxed::Box&lt;[u8]&gt;,())&gt; (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="357" width="0.7965%" height="15" fill="rgb(215,215,53)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="341" width="0.7965%" height="15" fill="rgb(223,4,10)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,581,999 samples, 0.80%)</title><rect x="39.8067%" y="325" width="0.7965%" height="15" fill="rgb(234,103,6)" fg:x="79059568" fg:w="1581999"/><text x="40.0567%" y="335.50"></text></g><g><title>__rcu_read_unlock (237,896 samples, 0.12%)</title><rect x="40.6033%" y="389" width="0.1198%" height="15" fill="rgb(227,97,0)" fg:x="80641567" fg:w="237896"/><text x="40.8533%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (246,171 samples, 0.12%)</title><rect x="40.6033%" y="517" width="0.1239%" height="15" fill="rgb(234,150,53)" fg:x="80641567" fg:w="246171"/><text x="40.8533%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (246,171 samples, 0.12%)</title><rect x="40.6033%" y="501" width="0.1239%" height="15" fill="rgb(228,201,54)" fg:x="80641567" fg:w="246171"/><text x="40.8533%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (246,171 samples, 0.12%)</title><rect x="40.6033%" y="485" width="0.1239%" height="15" fill="rgb(222,22,37)" fg:x="80641567" fg:w="246171"/><text x="40.8533%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (246,171 samples, 0.12%)</title><rect x="40.6033%" y="469" width="0.1239%" height="15" fill="rgb(237,53,32)" fg:x="80641567" fg:w="246171"/><text x="40.8533%" y="479.50"></text></g><g><title>core::ptr::write (246,171 samples, 0.12%)</title><rect x="40.6033%" y="453" width="0.1239%" height="15" fill="rgb(233,25,53)" fg:x="80641567" fg:w="246171"/><text x="40.8533%" y="463.50"></text></g><g><title>asm_exc_page_fault (246,171 samples, 0.12%)</title><rect x="40.6033%" y="437" width="0.1239%" height="15" fill="rgb(210,40,34)" fg:x="80641567" fg:w="246171"/><text x="40.8533%" y="447.50"></text></g><g><title>exc_page_fault (246,171 samples, 0.12%)</title><rect x="40.6033%" y="421" width="0.1239%" height="15" fill="rgb(241,220,44)" fg:x="80641567" fg:w="246171"/><text x="40.8533%" y="431.50"></text></g><g><title>do_user_addr_fault (246,171 samples, 0.12%)</title><rect x="40.6033%" y="405" width="0.1239%" height="15" fill="rgb(235,28,35)" fg:x="80641567" fg:w="246171"/><text x="40.8533%" y="415.50"></text></g><g><title>workload_gen::AsciiWriter::write_insert (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="517" width="5.4273%" height="15" fill="rgb(210,56,17)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="527.50">workloa..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="501" width="5.4273%" height="15" fill="rgb(224,130,29)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="511.50">std::io..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="485" width="5.4273%" height="15" fill="rgb(235,212,8)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="495.50">alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="469" width="5.4273%" height="15" fill="rgb(223,33,50)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="479.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="453" width="5.4273%" height="15" fill="rgb(219,149,13)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="463.50">alloc::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="437" width="5.4273%" height="15" fill="rgb(250,156,29)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="447.50">core::i..</text></g><g><title>__memcpy_avx512_unaligned_erms (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="421" width="5.4273%" height="15" fill="rgb(216,193,19)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="431.50">__memcp..</text></g><g><title>asm_exc_page_fault (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="405" width="5.4273%" height="15" fill="rgb(216,135,14)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="415.50">asm_exc..</text></g><g><title>exc_page_fault (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="389" width="5.4273%" height="15" fill="rgb(241,47,5)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="399.50">exc_pag..</text></g><g><title>do_user_addr_fault (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="373" width="5.4273%" height="15" fill="rgb(233,42,35)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="383.50">do_user..</text></g><g><title>handle_mm_fault (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="357" width="5.4273%" height="15" fill="rgb(231,13,6)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="367.50">handle_..</text></g><g><title>__handle_mm_fault (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="341" width="5.4273%" height="15" fill="rgb(207,181,40)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="351.50">__handl..</text></g><g><title>handle_pte_fault (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="325" width="5.4273%" height="15" fill="rgb(254,173,49)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="335.50">handle_..</text></g><g><title>do_anonymous_page (10,778,989 samples, 5.43%)</title><rect x="40.7272%" y="309" width="5.4273%" height="15" fill="rgb(221,1,38)" fg:x="80887738" fg:w="10778989"/><text x="40.9772%" y="319.50">do_anon..</text></g><g><title>alloc_anon_folio (5,879,429 samples, 2.96%)</title><rect x="43.1941%" y="293" width="2.9603%" height="15" fill="rgb(206,124,46)" fg:x="85787298" fg:w="5879429"/><text x="43.4441%" y="303.50">all..</text></g><g><title>vma_alloc_folio_noprof (5,879,429 samples, 2.96%)</title><rect x="43.1941%" y="277" width="2.9603%" height="15" fill="rgb(249,21,11)" fg:x="85787298" fg:w="5879429"/><text x="43.4441%" y="287.50">vma..</text></g><g><title>folio_alloc_mpol_noprof (5,879,429 samples, 2.96%)</title><rect x="43.1941%" y="261" width="2.9603%" height="15" fill="rgb(222,201,40)" fg:x="85787298" fg:w="5879429"/><text x="43.4441%" y="271.50">fol..</text></g><g><title>alloc_pages_mpol_noprof (5,879,429 samples, 2.96%)</title><rect x="43.1941%" y="245" width="2.9603%" height="15" fill="rgb(235,61,29)" fg:x="85787298" fg:w="5879429"/><text x="43.4441%" y="255.50">all..</text></g><g><title>_find_first_bit (5,879,429 samples, 2.96%)</title><rect x="43.1941%" y="229" width="2.9603%" height="15" fill="rgb(219,207,3)" fg:x="85787298" fg:w="5879429"/><text x="43.4441%" y="239.50">_fi..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,061,864 samples, 3.56%)</title><rect x="59.5363%" y="277" width="3.5557%" height="15" fill="rgb(222,56,46)" fg:x="118244206" fg:w="7061864"/><text x="59.7863%" y="287.50">core..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (37,749,449 samples, 19.01%)</title><rect x="46.1545%" y="373" width="19.0070%" height="15" fill="rgb(239,76,54)" fg:x="91666727" fg:w="37749449"/><text x="46.4045%" y="383.50">&lt;core::iter::adapters::take::T..</text></g><g><title>&lt;rand::distr::distribution::Iter&lt;D,R,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,514,132 samples, 12.34%)</title><rect x="52.8185%" y="357" width="12.3429%" height="15" fill="rgb(231,124,27)" fg:x="104902044" fg:w="24514132"/><text x="53.0685%" y="367.50">&lt;rand::distr::dist..</text></g><g><title>&lt;rand::distr::other::Alphanumeric as rand::distr::distribution::Distribution&lt;u8&gt;&gt;::sample (24,514,132 samples, 12.34%)</title><rect x="52.8185%" y="341" width="12.3429%" height="15" fill="rgb(249,195,6)" fg:x="104902044" fg:w="24514132"/><text x="53.0685%" y="351.50">&lt;rand::distr::othe..</text></g><g><title>&lt;T as rand_core::RngCore&gt;::next_u32 (24,514,132 samples, 12.34%)</title><rect x="52.8185%" y="325" width="12.3429%" height="15" fill="rgb(237,174,47)" fg:x="104902044" fg:w="24514132"/><text x="53.0685%" y="335.50">&lt;T as rand_core::R..</text></g><g><title>&lt;rand_xoshiro::xoshiro256plus::Xoshiro256Plus as rand_core::RngCore&gt;::next_u32 (24,514,132 samples, 12.34%)</title><rect x="52.8185%" y="309" width="12.3429%" height="15" fill="rgb(206,201,31)" fg:x="104902044" fg:w="24514132"/><text x="53.0685%" y="319.50">&lt;rand_xoshiro::xos..</text></g><g><title>&lt;rand_xoshiro::xoshiro256plus::Xoshiro256Plus as rand_core::RngCore&gt;::next_u64 (24,514,132 samples, 12.34%)</title><rect x="52.8185%" y="293" width="12.3429%" height="15" fill="rgb(231,57,52)" fg:x="104902044" fg:w="24514132"/><text x="53.0685%" y="303.50">&lt;rand_xoshiro::xos..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,110,106 samples, 2.07%)</title><rect x="63.0920%" y="277" width="2.0695%" height="15" fill="rgb(248,177,22)" fg:x="125306070" fg:w="4110106"/><text x="63.3420%" y="287.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (48,048,532 samples, 24.19%)</title><rect x="46.1545%" y="405" width="24.1926%" height="15" fill="rgb(215,211,37)" fg:x="91666727" fg:w="48048532"/><text x="46.4045%" y="415.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::sp..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (48,048,532 samples, 24.19%)</title><rect x="46.1545%" y="389" width="24.1926%" height="15" fill="rgb(241,128,51)" fg:x="91666727" fg:w="48048532"/><text x="46.4045%" y="399.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (10,299,083 samples, 5.19%)</title><rect x="65.1614%" y="373" width="5.1856%" height="15" fill="rgb(227,165,31)" fg:x="129416176" fg:w="10299083"/><text x="65.4114%" y="383.50">alloc:..</text></g><g><title>handle_mm_fault (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="197" width="2.4233%" height="15" fill="rgb(228,167,24)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="207.50">ha..</text></g><g><title>__handle_mm_fault (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="181" width="2.4233%" height="15" fill="rgb(228,143,12)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="191.50">__..</text></g><g><title>handle_pte_fault (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="165" width="2.4233%" height="15" fill="rgb(249,149,8)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="175.50">ha..</text></g><g><title>do_anonymous_page (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="149" width="2.4233%" height="15" fill="rgb(243,35,44)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="159.50">do..</text></g><g><title>alloc_anon_folio (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="133" width="2.4233%" height="15" fill="rgb(246,89,9)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="143.50">al..</text></g><g><title>vma_alloc_folio_noprof (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="117" width="2.4233%" height="15" fill="rgb(233,213,13)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="127.50">vm..</text></g><g><title>folio_alloc_mpol_noprof (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="101" width="2.4233%" height="15" fill="rgb(233,141,41)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="111.50">fo..</text></g><g><title>alloc_pages_mpol_noprof (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="85" width="2.4233%" height="15" fill="rgb(239,167,4)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="95.50">al..</text></g><g><title>__alloc_pages_noprof (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="69" width="2.4233%" height="15" fill="rgb(209,217,16)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="79.50">__..</text></g><g><title>get_page_from_freelist (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="53" width="2.4233%" height="15" fill="rgb(219,88,35)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="63.50">ge..</text></g><g><title>clear_page_erms (4,812,803 samples, 2.42%)</title><rect x="70.3470%" y="37" width="2.4233%" height="15" fill="rgb(220,193,23)" fg:x="139715259" fg:w="4812803"/><text x="70.5970%" y="47.50">cl..</text></g><g><title>std::panic::catch_unwind (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="693" width="55.0566%" height="15" fill="rgb(230,90,52)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="677" width="55.0566%" height="15" fill="rgb(252,106,19)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="661" width="55.0566%" height="15" fill="rgb(206,74,20)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="645" width="55.0566%" height="15" fill="rgb(230,138,44)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_on..</text></g><g><title>test::run_test_in_process::_{{closure}} (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="629" width="55.0566%" height="15" fill="rgb(235,182,43)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="639.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="613" width="55.0566%" height="15" fill="rgb(242,16,51)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="623.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="597" width="55.0566%" height="15" fill="rgb(248,9,4)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="581" width="55.0566%" height="15" fill="rgb(210,31,22)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>workload_gen::tests::empty_point_queries::_{{closure}} (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="565" width="55.0566%" height="15" fill="rgb(239,54,39)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="575.50">workload_gen::tests::empty_point_queries::_{{closure}}</text></g><g><title>workload_gen::tests::empty_point_queries (109,347,178 samples, 55.06%)</title><rect x="20.1668%" y="549" width="55.0566%" height="15" fill="rgb(230,99,41)" fg:x="40052953" fg:w="109347178"/><text x="20.4168%" y="559.50">workload_gen::tests::empty_point_queries</text></g><g><title>workload_gen::write_operations (100,805,081 samples, 50.76%)</title><rect x="24.4677%" y="533" width="50.7556%" height="15" fill="rgb(253,106,12)" fg:x="48595050" fg:w="100805081"/><text x="24.7177%" y="543.50">workload_gen::write_operations</text></g><g><title>workload_gen::gen_string (57,733,404 samples, 29.07%)</title><rect x="46.1545%" y="517" width="29.0689%" height="15" fill="rgb(213,46,41)" fg:x="91666727" fg:w="57733404"/><text x="46.4045%" y="527.50">workload_gen::gen_string</text></g><g><title>core::iter::traits::iterator::Iterator::collect (57,733,404 samples, 29.07%)</title><rect x="46.1545%" y="501" width="29.0689%" height="15" fill="rgb(215,133,35)" fg:x="91666727" fg:w="57733404"/><text x="46.4045%" y="511.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;I&gt; for alloc::boxed::Box&lt;[I]&gt;&gt;::from_iter (57,733,404 samples, 29.07%)</title><rect x="46.1545%" y="485" width="29.0689%" height="15" fill="rgb(213,28,5)" fg:x="91666727" fg:w="57733404"/><text x="46.4045%" y="495.50">alloc::boxed::iter::&lt;impl core::iter::traits::c..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (57,733,404 samples, 29.07%)</title><rect x="46.1545%" y="469" width="29.0689%" height="15" fill="rgb(215,77,49)" fg:x="91666727" fg:w="57733404"/><text x="46.4045%" y="479.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (57,733,404 samples, 29.07%)</title><rect x="46.1545%" y="453" width="29.0689%" height="15" fill="rgb(248,100,22)" fg:x="91666727" fg:w="57733404"/><text x="46.4045%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::coll..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (57,733,404 samples, 29.07%)</title><rect x="46.1545%" y="437" width="29.0689%" height="15" fill="rgb(208,67,9)" fg:x="91666727" fg:w="57733404"/><text x="46.4045%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (57,733,404 samples, 29.07%)</title><rect x="46.1545%" y="421" width="29.0689%" height="15" fill="rgb(219,133,21)" fg:x="91666727" fg:w="57733404"/><text x="46.4045%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_it..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="405" width="4.8764%" height="15" fill="rgb(246,46,29)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="415.50">alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="389" width="4.8764%" height="15" fill="rgb(246,185,52)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="399.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="373" width="4.8764%" height="15" fill="rgb(252,136,11)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="383.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="357" width="4.8764%" height="15" fill="rgb(219,138,53)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="367.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="341" width="4.8764%" height="15" fill="rgb(211,51,23)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="351.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="325" width="4.8764%" height="15" fill="rgb(247,221,28)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="335.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="309" width="4.8764%" height="15" fill="rgb(251,222,45)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="319.50">alloc:..</text></g><g><title>alloc::alloc::alloc (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="293" width="4.8764%" height="15" fill="rgb(217,162,53)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="303.50">alloc:..</text></g><g><title>__GI___libc_malloc (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="277" width="4.8764%" height="15" fill="rgb(229,93,14)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="287.50">__GI__..</text></g><g><title>_int_malloc (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="261" width="4.8764%" height="15" fill="rgb(209,67,49)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="271.50">_int_m..</text></g><g><title>asm_exc_page_fault (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="245" width="4.8764%" height="15" fill="rgb(213,87,29)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="255.50">asm_ex..</text></g><g><title>exc_page_fault (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="229" width="4.8764%" height="15" fill="rgb(205,151,52)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="239.50">exc_pa..</text></g><g><title>do_user_addr_fault (9,684,872 samples, 4.88%)</title><rect x="70.3470%" y="213" width="4.8764%" height="15" fill="rgb(253,215,39)" fg:x="139715259" fg:w="9684872"/><text x="70.5970%" y="223.50">do_use..</text></g><g><title>lock_vma_under_rcu (4,872,069 samples, 2.45%)</title><rect x="72.7703%" y="197" width="2.4531%" height="15" fill="rgb(221,220,41)" fg:x="144528062" fg:w="4872069"/><text x="73.0203%" y="207.50">lo..</text></g><g><title>__GI___clone3 (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="949" width="71.3604%" height="15" fill="rgb(218,133,21)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="959.50">__GI___clone3</text></g><g><title>start_thread (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="933" width="71.3604%" height="15" fill="rgb(221,193,43)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="943.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="917" width="71.3604%" height="15" fill="rgb(240,128,52)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="927.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="901" width="71.3604%" height="15" fill="rgb(253,114,12)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="911.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="885" width="71.3604%" height="15" fill="rgb(215,223,47)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="895.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="869" width="71.3604%" height="15" fill="rgb(248,225,23)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="879.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="853" width="71.3604%" height="15" fill="rgb(250,108,0)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="863.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="837" width="71.3604%" height="15" fill="rgb(228,208,7)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="821" width="71.3604%" height="15" fill="rgb(244,45,10)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="805" width="71.3604%" height="15" fill="rgb(207,125,25)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="815.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="789" width="71.3604%" height="15" fill="rgb(210,195,18)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="799.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="773" width="71.3604%" height="15" fill="rgb(249,80,12)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="783.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="757" width="71.3604%" height="15" fill="rgb(221,65,9)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="767.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="741" width="71.3604%" height="15" fill="rgb(235,49,36)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="751.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="725" width="71.3604%" height="15" fill="rgb(225,32,20)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="735.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (141,727,990 samples, 71.36%)</title><rect x="20.1668%" y="709" width="71.3604%" height="15" fill="rgb(215,141,46)" fg:x="40052953" fg:w="141727990"/><text x="20.4168%" y="719.50">test::run_test_in_process</text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="693" width="16.3038%" height="15" fill="rgb(250,160,47)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="703.50">std::sync::mpsc::Sender&lt;T..</text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="677" width="16.3038%" height="15" fill="rgb(216,222,40)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="687.50">std::sync::mpmc::Sender&lt;T..</text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="661" width="16.3038%" height="15" fill="rgb(234,217,39)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="671.50">std::sync::mpmc::list::Ch..</text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::start_send (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="645" width="16.3038%" height="15" fill="rgb(207,178,40)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="655.50">std::sync::mpmc::list::Ch..</text></g><g><title>std::sync::mpmc::list::Block&lt;T&gt;::new (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="629" width="16.3038%" height="15" fill="rgb(221,136,13)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="639.50">std::sync::mpmc::list::Bl..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_zeroed (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="613" width="16.3038%" height="15" fill="rgb(249,199,10)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="623.50">alloc::boxed::Box&lt;T&gt;::new..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_zeroed_in (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="597" width="16.3038%" height="15" fill="rgb(249,222,13)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="607.50">alloc::boxed::Box&lt;T,A&gt;::n..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_zeroed_in (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="581" width="16.3038%" height="15" fill="rgb(244,185,38)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="591.50">alloc::boxed::Box&lt;T,A&gt;::t..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="565" width="16.3038%" height="15" fill="rgb(236,202,9)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="575.50">&lt;alloc::alloc::Global as ..</text></g><g><title>alloc::alloc::Global::alloc_impl (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="549" width="16.3038%" height="15" fill="rgb(250,229,37)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="559.50">alloc::alloc::Global::all..</text></g><g><title>alloc::alloc::alloc_zeroed (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="533" width="16.3038%" height="15" fill="rgb(206,174,23)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="543.50">alloc::alloc::alloc_zeroed</text></g><g><title>__libc_calloc (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="517" width="16.3038%" height="15" fill="rgb(211,33,43)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="527.50">__libc_calloc</text></g><g><title>_int_malloc (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="501" width="16.3038%" height="15" fill="rgb(245,58,50)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="511.50">_int_malloc</text></g><g><title>malloc_consolidate (32,380,812 samples, 16.30%)</title><rect x="75.2234%" y="485" width="16.3038%" height="15" fill="rgb(244,68,36)" fg:x="149400131" fg:w="32380812"/><text x="75.4734%" y="495.50">malloc_consolidate</text></g><g><title>malloc_consolidate (4,704,526 samples, 2.37%)</title><rect x="89.1585%" y="469" width="2.3687%" height="15" fill="rgb(232,229,15)" fg:x="177076417" fg:w="4704526"/><text x="89.4085%" y="479.50">ma..</text></g><g><title>tests::empty_po (191,784,774 samples, 96.56%)</title><rect x="0.0022%" y="965" width="96.5642%" height="15" fill="rgb(254,30,23)" fg:x="4344" fg:w="191784774"/><text x="0.2522%" y="975.50">tests::empty_po</text></g><g><title>_int_malloc (10,008,175 samples, 5.04%)</title><rect x="91.5272%" y="949" width="5.0391%" height="15" fill="rgb(235,160,14)" fg:x="181780943" fg:w="10008175"/><text x="91.7772%" y="959.50">_int_m..</text></g><g><title>_start (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="949" width="0.9792%" height="15" fill="rgb(212,155,44)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="959.50"></text></g><g><title>_dl_start (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="933" width="0.9792%" height="15" fill="rgb(226,2,50)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="943.50"></text></g><g><title>_dl_start_final (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="917" width="0.9792%" height="15" fill="rgb(234,177,6)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="927.50"></text></g><g><title>_dl_sysdep_start (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="901" width="0.9792%" height="15" fill="rgb(217,24,9)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="911.50"></text></g><g><title>dl_main (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="885" width="0.9792%" height="15" fill="rgb(220,13,46)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="895.50"></text></g><g><title>__lll_elision_init (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="869" width="0.9792%" height="15" fill="rgb(239,221,27)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="879.50"></text></g><g><title>asm_exc_page_fault (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="853" width="0.9792%" height="15" fill="rgb(222,198,25)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="863.50"></text></g><g><title>exc_page_fault (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="837" width="0.9792%" height="15" fill="rgb(211,99,13)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="847.50"></text></g><g><title>do_user_addr_fault (1,944,715 samples, 0.98%)</title><rect x="96.5664%" y="821" width="0.9792%" height="15" fill="rgb(232,111,31)" fg:x="191789118" fg:w="1944715"/><text x="96.8164%" y="831.50"></text></g><g><title>__x64_sys_execve (95,481 samples, 0.05%)</title><rect x="97.5508%" y="901" width="0.0481%" height="15" fill="rgb(245,82,37)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="911.50"></text></g><g><title>do_execveat_common.isra.0 (95,481 samples, 0.05%)</title><rect x="97.5508%" y="885" width="0.0481%" height="15" fill="rgb(227,149,46)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="895.50"></text></g><g><title>bprm_execve (95,481 samples, 0.05%)</title><rect x="97.5508%" y="869" width="0.0481%" height="15" fill="rgb(218,36,50)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="879.50"></text></g><g><title>bprm_execve.part.0 (95,481 samples, 0.05%)</title><rect x="97.5508%" y="853" width="0.0481%" height="15" fill="rgb(226,80,48)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="863.50"></text></g><g><title>exec_binprm (95,481 samples, 0.05%)</title><rect x="97.5508%" y="837" width="0.0481%" height="15" fill="rgb(238,224,15)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="847.50"></text></g><g><title>search_binary_handler (95,481 samples, 0.05%)</title><rect x="97.5508%" y="821" width="0.0481%" height="15" fill="rgb(241,136,10)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="831.50"></text></g><g><title>load_elf_binary (95,481 samples, 0.05%)</title><rect x="97.5508%" y="805" width="0.0481%" height="15" fill="rgb(208,32,45)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="815.50"></text></g><g><title>load_elf_interp.isra.0 (95,481 samples, 0.05%)</title><rect x="97.5508%" y="789" width="0.0481%" height="15" fill="rgb(207,135,9)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="799.50"></text></g><g><title>elf_load (95,481 samples, 0.05%)</title><rect x="97.5508%" y="773" width="0.0481%" height="15" fill="rgb(206,86,44)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="783.50"></text></g><g><title>vm_mmap (95,481 samples, 0.05%)</title><rect x="97.5508%" y="757" width="0.0481%" height="15" fill="rgb(245,177,15)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="767.50"></text></g><g><title>vm_mmap_pgoff (95,481 samples, 0.05%)</title><rect x="97.5508%" y="741" width="0.0481%" height="15" fill="rgb(206,64,50)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="751.50"></text></g><g><title>do_mmap (95,481 samples, 0.05%)</title><rect x="97.5508%" y="725" width="0.0481%" height="15" fill="rgb(234,36,40)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="735.50"></text></g><g><title>__get_unmapped_area (95,481 samples, 0.05%)</title><rect x="97.5508%" y="709" width="0.0481%" height="15" fill="rgb(213,64,8)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="719.50"></text></g><g><title>thp_get_unmapped_area (95,481 samples, 0.05%)</title><rect x="97.5508%" y="693" width="0.0481%" height="15" fill="rgb(210,75,36)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="703.50"></text></g><g><title>mm_get_unmapped_area_vmflags (95,481 samples, 0.05%)</title><rect x="97.5508%" y="677" width="0.0481%" height="15" fill="rgb(229,88,21)" fg:x="193744384" fg:w="95481"/><text x="97.8008%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4,863,821 samples, 2.45%)</title><rect x="97.5508%" y="949" width="2.4489%" height="15" fill="rgb(252,204,47)" fg:x="193744384" fg:w="4863821"/><text x="97.8008%" y="959.50">en..</text></g><g><title>do_syscall_64 (4,863,821 samples, 2.45%)</title><rect x="97.5508%" y="933" width="2.4489%" height="15" fill="rgb(208,77,27)" fg:x="193744384" fg:w="4863821"/><text x="97.8008%" y="943.50">do..</text></g><g><title>x64_sys_call (4,863,821 samples, 2.45%)</title><rect x="97.5508%" y="917" width="2.4489%" height="15" fill="rgb(221,76,26)" fg:x="193744384" fg:w="4863821"/><text x="97.8008%" y="927.50">x6..</text></g><g><title>__x64_sys_exit_group (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="901" width="2.4009%" height="15" fill="rgb(225,139,18)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="911.50">__..</text></g><g><title>do_group_exit (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="885" width="2.4009%" height="15" fill="rgb(230,137,11)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="895.50">do..</text></g><g><title>do_exit (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="869" width="2.4009%" height="15" fill="rgb(212,28,1)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="879.50">do..</text></g><g><title>exit_mm (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="853" width="2.4009%" height="15" fill="rgb(248,164,17)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="863.50">ex..</text></g><g><title>mmput (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="837" width="2.4009%" height="15" fill="rgb(222,171,42)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="847.50">mm..</text></g><g><title>__mmput (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="821" width="2.4009%" height="15" fill="rgb(243,84,45)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="831.50">__..</text></g><g><title>exit_mmap (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="805" width="2.4009%" height="15" fill="rgb(252,49,23)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="815.50">ex..</text></g><g><title>tlb_finish_mmu (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="789" width="2.4009%" height="15" fill="rgb(215,19,7)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="799.50">tl..</text></g><g><title>__tlb_batch_free_encoded_pages (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="773" width="2.4009%" height="15" fill="rgb(238,81,41)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="783.50">__..</text></g><g><title>free_pages_and_swap_cache (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="757" width="2.4009%" height="15" fill="rgb(210,199,37)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="767.50">fr..</text></g><g><title>folios_put_refs (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="741" width="2.4009%" height="15" fill="rgb(244,192,49)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="751.50">fo..</text></g><g><title>__page_cache_release.part.0 (4,768,340 samples, 2.40%)</title><rect x="97.5989%" y="725" width="2.4009%" height="15" fill="rgb(226,211,11)" fg:x="193839865" fg:w="4768340"/><text x="97.8489%" y="735.50">__..</text></g><g><title>all (198,608,609 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(236,162,54)" fg:x="0" fg:w="198608609"/><text x="0.2500%" y="991.50"></text></g><g><title>workload_gen-c6 (6,819,491 samples, 3.43%)</title><rect x="96.5664%" y="965" width="3.4336%" height="15" fill="rgb(220,229,9)" fg:x="191789118" fg:w="6819491"/><text x="96.8164%" y="975.50">wor..</text></g></svg></svg>